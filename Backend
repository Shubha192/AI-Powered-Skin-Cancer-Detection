import os
from flask import Flask, request, jsonify
from flask_cors import CORS
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing.image import load_img, img_to_array
import numpy as np

app = Flask(__name__)
CORS(app) 

UPLOAD_FOLDER = "uploads"
if not os.path.exists(UPLOAD_FOLDER):
    os.makedirs(UPLOAD_FOLDER)

app.config["UPLOAD_FOLDER"] = UPLOAD_FOLDER

MODEL_PATH = "model/skin_cancer_model.h5"
model = load_model(MODEL_PATH)

CLASS_LABELS = ["Benign", "Malignant"]

@app.route("/")
def home():
    return jsonify({"message": "Skin Cancer Detection API is running!"})

@app.route("/analyze", methods=["POST"])
def analyze():
   
    if "image" not in request.files:
        return jsonify({"error": "No file uploaded"}), 400

    file = request.files["image"]
    if file.filename == "":
        return jsonify({"error": "No file selected"}), 400

       filepath = os.path.join(app.config["UPLOAD_FOLDER"], file.filename)
    file.save(filepath)

       try:
        img = load_img(filepath, target_size=(224, 224))  # Resize to model input size
        img_array = img_to_array(img) / 255.0  # Normalize pixel values
        img_array = np.expand_dims(img_array, axis=0)  # Add batch dimension

                prediction = model.predict(img_array)
        predicted_class = CLASS_LABELS[np.argmax(prediction)]
        confidence = float(np.max(prediction))

              return jsonify({
            "prediction": predicted_class,
            "confidence": confidence
        })

    except Exception as e:
        return jsonify({"error": f"Error processing image: {str(e)}"}), 500

    finally:
       
        if os.path.exists(filepath):
            os.remove(filepath)


if __name__ == "__main__":
    app.run(debug=True, port=5000)
