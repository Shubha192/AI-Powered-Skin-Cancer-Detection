from transformers import ViTForImageClassification
import torch
from sklearn.metrics import accuracy_score, f1_score, precision_score, recall_score
from torchvision import datasets, transforms
from torch.utils.data import DataLoader

# Step 1: Set up transformations for the test dataset
test_transform = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor(),
    transforms.Normalize([0.5, 0.5, 0.5], [0.5, 0.5, 0.5])
])

# Step 2: Load the test dataset
test_data_dir = r"C:\Users\chira\OneDrive\Desktop\MINI PROJECT\Dataset\data\test"
test_dataset = datasets.ImageFolder(test_data_dir, transform=test_transform)
test_loader = DataLoader(test_dataset, batch_size=32, shuffle=False)

# Step 3: Load the pre-trained model
model = ViTForImageClassification.from_pretrained(
    r"C:\Users\chira\OneDrive\Desktop\MINI PROJECT\vit_skin_cancer_model",
    num_labels=2  # Binary classification: benign or malignant
)

# Step 4: Use GPU if available
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model.to(device)

# Step 5: Evaluate the model
def evaluate_model(model, test_loader, device):
    model.eval()
    test_preds, test_labels = [], []

    with torch.no_grad():
        for images, labels in test_loader:
            images, labels = images.to(device), labels.to(device)
            outputs = model(pixel_values=images).logits
            _, preds = torch.max(outputs, 1)
            test_preds.extend(preds.cpu().numpy())
            test_labels.extend(labels.cpu().numpy())

    accuracy = accuracy_score(test_labels, test_preds)
    f1 = f1_score(test_labels, test_preds, average='weighted')
    precision = precision_score(test_labels, test_preds, average='weighted')
    recall = recall_score(test_labels, test_preds, average='weighted')

    print(f"Test Accuracy: {accuracy:.4f}")
    print(f"F1 Score: {f1:.4f}")
    print(f"Precision: {precision:.4f}")
    print(f"Recall: {recall:.4f}")

# Step 6: Run the evaluation
evaluate_model(model, test_loader, device)
