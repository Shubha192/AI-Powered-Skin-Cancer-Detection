import torch
from torch.utils.data import DataLoader
from torchvision import datasets, transforms
from transformers import ViTForImageClassification, ViTFeatureExtractor
from sklearn.metrics import classification_report, accuracy_score
import torch.nn as nn
import torch.optim as optim
import os
from tqdm import tqdm

# Check for GPU
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
print(f"Using device: {device}")

# Parameters
batch_size = 16
num_epochs = 25
learning_rate = 3e-5
num_classes = 3  # benign, malignant, normal
early_stopping_patience = 5

# Dataset paths
train_dir = r"C:\Users\chira\OneDrive\Desktop\project\dataset\train"  # Path to train folder
test_dir = r"C:\Users\chira\OneDrive\Desktop\project\dataset\test"    # Path to test folder

# Data Augmentation and Preprocessing
train_transform = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.RandomHorizontalFlip(),
    transforms.RandomRotation(10),
    transforms.ColorJitter(),
    transforms.ToTensor(),
    transforms.Normalize([0.5], [0.5])
])

test_transform = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor(),
    transforms.Normalize([0.5], [0.5])
])

# Datasets and DataLoaders
if not os.path.exists(train_dir) or not os.path.exists(test_dir):
    raise ValueError("Train or Test directory not found. Please check dataset paths.")

train_dataset = datasets.ImageFolder(train_dir, transform=train_transform)
test_dataset = datasets.ImageFolder(test_dir, transform=test_transform)

train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True)
test_loader = DataLoader(test_dataset, batch_size=batch_size, shuffle=False)

# Model Initialization with 'ignore_mismatched_sizes=True'
model = ViTForImageClassification.from_pretrained(
    "google/vit-base-patch16-224", 
    num_labels=num_classes,
    ignore_mismatched_sizes=True  # This will allow the mismatch in sizes
)
model.to(device)

# Optimizer and Loss Function
optimizer = optim.AdamW(model.parameters(), lr=learning_rate)
criterion = nn.CrossEntropyLoss()

# Training and Validation Loop
best_accuracy = 0
early_stopping_counter = 0

print("Starting Training...")
for epoch in range(num_epochs):
    print(f"Epoch {epoch+1}/{num_epochs}...")  # Indicate the epoch number
    model.train()  # Set model to training mode
    train_loss = 0

    # Wrap train_loader with tqdm for a progress bar
    for batch_idx, (inputs, labels) in tqdm(enumerate(train_loader), total=len(train_loader), desc="Training Epoch"):
        inputs, labels = inputs.to(device), labels.to(device)

        optimizer.zero_grad()
        outputs = model(pixel_values=inputs).logits
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()

        train_loss += loss.item()

        if batch_idx % 10 == 0:  # Print every 10 batches
            print(f"Batch {batch_idx}/{len(train_loader)} - Loss: {loss.item():.4f}")

    train_loss /= len(train_loader)
    print(f"Epoch {epoch+1}/{num_epochs}, Training Loss: {train_loss:.4f}")

    # Validation
    model.eval()
    all_preds = []
    all_labels = []
    with torch.no_grad():
        for batch in test_loader:
            inputs, labels = batch
            inputs, labels = inputs.to(device), labels.to(device)

            outputs = model(pixel_values=inputs).logits
            preds = torch.argmax(outputs, dim=1)

            all_preds.extend(preds.cpu().numpy())
            all_labels.extend(labels.cpu().numpy())

    accuracy = accuracy_score(all_labels, all_preds)
    print(f"Validation Accuracy: {accuracy:.4f}")

    # Save Best Model
    if accuracy > best_accuracy:
        best_accuracy = accuracy
        early_stopping_counter = 0
        torch.save(model.state_dict(), "best_model.pth")
        print(f"New best model saved with accuracy: {accuracy:.4f}")
    else:
        early_stopping_counter += 1

    # Early Stopping
    if early_stopping_counter >= early_stopping_patience:
        print("Early stopping triggered.")
        break

# Load Best Model for Testing
model.load_state_dict(torch.load("best_model.pth"))

# Testing
model.eval()
test_preds = []
test_labels = []
with torch.no_grad():
    for batch in test_loader:
        inputs, labels = batch
        inputs, labels = inputs.to(device), labels.to(device)

        outputs = model(pixel_values=inputs).logits
        preds = torch.argmax(outputs, dim=1)

        test_preds.extend(preds.cpu().numpy())
        test_labels.extend(labels.cpu().numpy())

# Classification Report
print("\nClassification Report:")
print(classification_report(test_labels, test_preds, target_names=train_dataset.classes))

# Final Accuracy
final_accuracy = accuracy_score(test_labels, test_preds)
print(f"Final Test Accuracy: {final_accuracy:.4f}")
